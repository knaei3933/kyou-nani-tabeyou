// @ts-nocheck
'use client';

import React, { useState, useEffect } from 'react';
import { GlassCard, GlassButton } from './glass-card';

export interface StepGuidance {
  stepId: number;
  title: string;
  message: string;
  actionText: string;
  tips?: string[];
  warning?: string;
  success?: string;
}

interface StepGuidanceProps {
  currentStep: number;
  guidance: StepGuidance[];
  onNext?: () => void;
  onPrev?: () => void;
  isFirstStep?: boolean;
  isLastStep?: boolean;
  showActions?: boolean;
  className?: string;
}

export const StepGuidanceComponent: React.FC<StepGuidanceProps> = ({
  currentStep,
  guidance,
  onNext,
  onPrev,
  isFirstStep = false,
  isLastStep = false,
  showActions = true,
  className = ''
}) => {
  const [mounted, setMounted] = useState(false);
  const [showTips, setShowTips] = useState(false);

  useEffect(() => {
    setMounted(true);
    setShowTips(false); // „Çπ„ÉÜ„ÉÉ„ÉóÂ§âÊõ¥ÊôÇ„Å´tips„ÇíÈñâ„Åò„Çã
  }, [currentStep]);

  if (!mounted) return null;

  const currentGuidance = guidance.find(g => g.stepId === currentStep);
  if (!currentGuidance) return null;

  return (
    <div className={`w-full ${className}`}>
      <GlassCard className="mb-6 relative overflow-hidden">
        {/* ËÉåÊôØË£ÖÈ£æ */}
        <div className="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-purple-200 to-indigo-200 rounded-full -translate-y-16 translate-x-16 opacity-50" />
        
        <div className="relative z-10">
          {/* „Ç¨„Ç§„ÉÄ„É≥„Çπ„Éò„ÉÉ„ÉÄ„Éº */}
          <div className="flex items-center mb-4">
            <div className="w-10 h-10 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full flex items-center justify-center text-white font-bold text-lg mr-4">
              {currentStep}
            </div>
            <div>
              <h3 className="text-xl font-bold text-gray-800">
                {currentGuidance.title}
              </h3>
              <p className="text-gray-600 text-sm">
                „Çπ„ÉÜ„ÉÉ„Éó {currentStep} „ÅÆ„Ç¨„Ç§„ÉÄ„É≥„Çπ
              </p>
            </div>
          </div>

          {/* „É°„Ç§„É≥„É°„ÉÉ„Çª„Éº„Ç∏ */}
          <div className="mb-6">
            <p className="text-gray-700 leading-relaxed mb-4">
              {currentGuidance.message}
            </p>
            
            {/* Ë≠¶Âëä„É°„ÉÉ„Çª„Éº„Ç∏ */}
            {currentGuidance.warning && (
              <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4 rounded">
                <div className="flex">
                  <div className="text-yellow-400 text-xl mr-3">‚ö†Ô∏è</div>
                  <p className="text-yellow-800 text-sm">
                    {currentGuidance.warning}
                  </p>
                </div>
              </div>
            )}

            {/* ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏ */}
            {currentGuidance.success && (
              <div className="bg-green-50 border-l-4 border-green-400 p-4 mb-4 rounded">
                <div className="flex">
                  <div className="text-green-400 text-xl mr-3">‚úÖ</div>
                  <p className="text-green-800 text-sm">
                    {currentGuidance.success}
                  </p>
                </div>
              </div>
            )}
          </div>

          {/* „Éí„É≥„Éà„Éª„Ç≥„ÉÑ„Çª„ÇØ„Ç∑„Éß„É≥ */}
          {currentGuidance.tips && currentGuidance.tips.length > 0 && (
            <div className="mb-6">
              <button
                onClick={() => setShowTips(!showTips)}
                className="flex items-center text-indigo-600 hover:text-indigo-800 font-semibold mb-3 transition-colors"
              >
                <span className="text-lg mr-2">üí°</span>
                „Éí„É≥„Éà„Éª„Ç≥„ÉÑ„ÇíË¶ã„Çã
                <svg
                  className={`ml-2 w-4 h-4 transition-transform ${showTips ? 'rotate-180' : ''}`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              {showTips && (
                <div className="bg-indigo-50 rounded-lg p-4 animate-fadeInUp">
                  <ul className="space-y-2">
                    {currentGuidance.tips.map((tip, index) => (
                      <li key={index} className="flex items-start">
                        <span className="text-indigo-500 font-bold mr-2 mt-1">‚Ä¢</span>
                        <span className="text-indigo-800 text-sm">{tip}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </div>
          )}

          {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
          {showActions && (
            <div className="flex flex-col sm:flex-row gap-3">
              {!isFirstStep && onPrev && (
                <GlassButton
                  onClick={onPrev}
                  variant="secondary"
                  className="sm:w-auto w-full"
                >
                  ‚Üê Ââç„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó
                </GlassButton>
              )}
              
              <div className="flex-1" />
              
              {!isLastStep && onNext && (
                <GlassButton
                  onClick={onNext}
                  variant="primary"
                  className="sm:w-auto w-full text-lg font-semibold"
                >
                  {currentGuidance.actionText} ‚Üí
                </GlassButton>
              )}
            </div>
          )}
        </div>
      </GlassCard>
    </div>
  );
};

// „Çπ„ÉÜ„ÉÉ„ÉóÂà•„Ç¨„Ç§„ÉÄ„É≥„ÇπË®≠ÂÆö
export const STEP_GUIDANCE: StepGuidance[] = [
  {
    stepId: 1,
    title: 'ü§î È£ü‰∫ãÈÅ∏Êäû',
    message: '„Åæ„Åö„ÅØ‰ªäÊó•È£ü„Åπ„Åü„ÅÑÊñôÁêÜ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË§áÊï∞„ÅÆÊñôÁêÜ„ÇíÈÅ∏„Çì„Åß„ÇÇÂ§ß‰∏àÂ§´„Åß„ÅôÔºÅ',
    actionText: '„Ç®„É™„Ç¢ÊåáÂÆö„Å´ÈÄ≤„ÇÄ',
    tips: [
      '‰∫∫Ê∞óÊñôÁêÜ„Éï„Ç£„É´„Çø„Éº„Çí‰Ωø„ÅÜ„Å®ÈÅ∏„Å≥„ÇÑ„Åô„Åè„Å™„Çä„Åæ„Åô',
      'ÊôÇÈñìÂ∏Ø„Å´Âêà„Çè„Åõ„Å¶ÊúùÈ£ü„ÉªÊòºÈ£ü„ÉªÂ§ïÈ£ü„Åã„ÇâÈÅ∏„Åπ„Åæ„Åô',
      '‰æ°Ê†º„ÇÑË™øÁêÜÊôÇÈñì„Åß„Éï„Ç£„É´„Çø„Éº„Çí„Åã„Åë„Çã„Åì„Å®„ÇÇÂèØËÉΩ„Åß„Åô',
      'Ëø∑„Å£„ÅüÊôÇ„ÅØÊ§úÁ¥¢Ê©üËÉΩ„Çí‰Ωø„Å£„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ'
    ],
    warning: 'Â∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅÆÊñôÁêÜ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
  },
  {
    stepId: 2,
    title: 'üìç „Ç®„É™„Ç¢ÊåáÂÆö',
    message: '„Åä‰Ωè„Åæ„ÅÑ„ÅÆ„Ç®„É™„Ç¢„Åæ„Åü„ÅØÈÖçÈÅî„ÇíÂ∏åÊúõ„Åô„Çã„Ç®„É™„Ç¢„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    actionText: '„É¨„Çπ„Éà„É©„É≥Ê§úÁ¥¢„ÇíÈñãÂßã',
    tips: [
      'ÁèæÂú®Âú∞„ÇíËá™ÂãïÂèñÂæó„Åô„Çã„Åì„Å®„ÇÇÂèØËÉΩ„Åß„Åô',
      'ËÅ∑Â†¥„ÇÑÂèã‰∫∫„ÅÆÂÆ∂„Å™„Å©„ÄÅ‰ªªÊÑè„ÅÆÂ†¥ÊâÄ„ÇíÊåáÂÆö„Åß„Åç„Åæ„Åô',
      '„Çà„ÇäÂÖ∑‰ΩìÁöÑ„Å™‰ΩèÊâÄ„ÇíÂÖ•Âäõ„Åô„Çã„Å®Ê§úÁ¥¢Á≤æÂ∫¶„Åå‰∏ä„Åå„Çä„Åæ„Åô',
      'ÈÖçÈÅîÂèØËÉΩ„Ç®„É™„Ç¢Â§ñ„ÅÆÂ†¥Âêà„ÅØËøë„Åè„ÅÆÂ∫óËàó„ÇíÊèêÊ°à„Åó„Åæ„Åô'
    ],
    warning: '„Ç®„É™„Ç¢„ÇíÊåáÂÆö„Åó„Å™„ÅÑ„Å®„É¨„Çπ„Éà„É©„É≥Ê§úÁ¥¢„Åå„Åß„Åç„Åæ„Åõ„Çì'
  },
  {
    stepId: 3,
    title: 'üè™ „É¨„Çπ„Éà„É©„É≥Ê§úÁ¥¢',
    message: 'ÈÅ∏Êäû„Åó„ÅüÊñôÁêÜ„Å®„Ç®„É™„Ç¢„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅÊúÄÈÅ©„Å™„É¨„Çπ„Éà„É©„É≥„ÇíÊ§úÁ¥¢„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
    actionText: '„É¨„Çπ„Éà„É©„É≥„ÇíÈÅ∏Êäû',
    tips: [
      'Ë©ï‰æ°„ÅÆÈ´ò„ÅÑÈ†Ü„ÉªÈÖçÈÅîÊôÇÈñì„ÅÆÊó©„ÅÑÈ†Ü„Åß‰∏¶„Å≥Êõø„Åà„Åß„Åç„Åæ„Åô',
      'ÈÖçÈÅîÊñôÈáë„ÇÇÊØîËºÉ„Åó„Å¶ÈÅ∏„Å∂„Åì„Å®„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„Åô',
      '„É¨„Éì„É•„Éº„ÇíÁ¢∫Ë™ç„Åó„Å¶‰ø°È†º„Åß„Åç„ÇãÂ∫óËàó„ÇíÈÅ∏„Å≥„Åæ„Åó„Çá„ÅÜ',
      'Âñ∂Ê•≠ÊôÇÈñì„ÇÇÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
    ],
    success: 'Ë§áÊï∞„ÅÆ„É¨„Çπ„Éà„É©„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„ÅüÔºÅ„ÅäÂ•Ω„Åø„ÅÆÂ∫óËàó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ'
  },
  {
    stepId: 4,
    title: 'üçΩÔ∏è „É°„Éã„É•„ÉºÁ¢∫Ë™ç„ÉªÊ≥®Êñá',
    message: '„É¨„Çπ„Éà„É©„É≥„ÅÆË©≥Á¥∞„Å®„É°„Éã„É•„Éº„ÇíÁ¢∫Ë™ç„Åó„Å¶„ÄÅÊ≥®Êñá„ÇíÂÆå‰∫Ü„Åï„Åõ„Åæ„Åó„Çá„ÅÜ„ÄÇ',
    actionText: 'Ê≥®Êñá„ÇíÁ¢∫ÂÆö',
    tips: [
      '„É°„Éã„É•„Éº„ÅÆË©≥Á¥∞Ë™¨Êòé„ÇíË™≠„Çì„ÅßÊúÄÈÅ©„Å™ÂïÜÂìÅ„ÇíÈÅ∏„Å≥„Åæ„Åó„Çá„ÅÜ',
      'Ë§áÊï∞„ÅÆÈÖçÈÅî„Ç¢„Éó„É™„ÇíÊØîËºÉ„Åó„Å¶ÊúÄÂÆâÂÄ§„ÇíÈÅ∏Êäû„Åß„Åç„Åæ„Åô',
      '„Çª„ÉÉ„ÉàÂïÜÂìÅ„ÇÑ„ÅäÂæó„Å™„Ç≠„É£„É≥„Éö„Éº„É≥„ÇÇ„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ',
      'ÈÖçÈÅîÊôÇÈñì„Å®ÊñôÈáë„ÇíÊúÄÁµÇÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâÊ≥®Êñá„Åó„Åæ„Åó„Çá„ÅÜ'
    ],
    success: '„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅÊ≥®Êñá„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÈÖçÈÅî„Çí„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ'
  }
];

// „Ç¨„Ç§„ÉÄ„É≥„ÇπÁÆ°ÁêÜ„Éï„ÉÉ„ÇØ
export const useStepGuidance = (initialStep: number = 1) => {
  const [currentStep, setCurrentStep] = useState(initialStep);
  const [completedSteps, setCompletedSteps] = useState<number[]>([]);
  
  const markStepCompleted = (stepId: number) => {
    setCompletedSteps(prev => {
      if (!prev.includes(stepId)) {
        return [...prev, stepId];
      }
      return prev;
    });
  };
  
  const isStepCompleted = (stepId: number) => {
    return completedSteps.includes(stepId);
  };
  
  const nextStep = () => {
    markStepCompleted(currentStep);
    if (currentStep < STEP_GUIDANCE.length) {
      setCurrentStep(prev => prev + 1);
    }
  };
  
  const prevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };
  
  const goToStep = (stepId: number) => {
    if (stepId >= 1 && stepId <= STEP_GUIDANCE.length) {
      setCurrentStep(stepId);
    }
  };
  
  const getCurrentGuidance = () => {
    return STEP_GUIDANCE.find(g => g.stepId === currentStep);
  };
  
  return {
    currentStep,
    completedSteps,
    nextStep,
    prevStep,
    goToStep,
    markStepCompleted,
    isStepCompleted,
    getCurrentGuidance,
    guidance: STEP_GUIDANCE
  };
}; 